import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from nltk.corpus import stopwords
import nltk
import re

# Load the dataset
df = pd.read_csv("/content/spam.csv", encoding='latin1')
df.head()

# Preprocessing
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    # Lowercasing
    text = text.lower()
    # Removing punctuation and special characters
    text = re.sub(r'\W', ' ', text)
    # Removing stopwords
    text = ' '.join([word for word in text.split() if word not in stop_words])
    return text

data['message'] = data['message'].apply(preprocess_text)

# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(data['message'], data['label'], test_size=0.2, random_state=42)

# Feature Extraction with TF-IDF
tfidf = TfidfVectorizer()

# Model Pipelines
models = {
    'Naive Bayes': Pipeline([('tfidf', tfidf), ('clf', MultinomialNB())]),
    'Logistic Regression': Pipeline([('tfidf', tfidf), ('clf', LogisticRegression(random_state=42))]),
    'SVM': Pipeline([('tfidf', tfidf), ('clf', SVC(kernel='linear', random_state=42))])
}

# Training and Evaluation
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"Model: {name}")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("\n")
